''' Implements a binary tree in python'''

class Binary_Tree:
    
    def __init__(self):
        self.head = None
        
    def insert(self, value):
        new = Node(value)
        if self.head == None:
            self.head = new
            new.level = 0
        else:
            counter = 1
            current = self.head
            found = False
            while found == False:
                if current.data < new.data:
                    if current.right != None:
                        current = current.right
                        counter +=1
                    else:
                        new.level = counter
                        current.right = new
                        found = True
                else:
                    if current.left != None:
                        current = current.left
                        counter +=1
                    else:
                        new.level = counter
                        current.left = new
                        found = True
        
    def show(self):
        queue = Queue()
        if self.head == None:
            return "The list is empty"
        else:
            queue.enqueue(self.head)
            show = ''
            level = 0
            while queue.check_empty() == False:
                temp = queue.dequeue()
                if temp.level == level:
                    new = str(temp.data)
                    show += ('  ' + new)
                else:
                    print(show)
                    show = ''
                    new = str(temp.data)
                    show += ('  ' + new)
                    level  = temp.level
                if temp.left != None:
                    queue.enqueue(temp.left)
                if temp.right != None:
                    queue.enqueue(temp.right)
            print(show)
            
    def find(self, value):
        current = self.head
        if self.head.data == value:
            return True
        else:
            while current.data != value:
                if value > current.data:
                    if current.right == None:
                        return False
                    else:
                        current = current.right
                else:
                    if current.left == None:
                        return False
                    else:
                        current = current.left
            return True
        
