/* This function makes a Max heap */

class Max_Heap{
    
public:
    
    vector<int> heap;
    
    Max_Heap(){
        heap.push_back(0);
        cout << " A Max Heap has been created" << endl;
    };
    
    ~Max_Heap(){
        
        cout << " The Max Heap has been deleted" << endl;
    };
    
    void swap1(int &i, int &j){
        int temp1 = heap[i];
        heap[i] = heap[j];
        heap[j] = temp1;
    };
    
    void add(int value){
        if( heap.size() ==1){
            heap.push_back(value);
        }
        else{
            heap.push_back(value);
            int current = heap.size()-1;
            int question = current/2;
            while( heap[question] < heap[current] && question >0){
                swap1(current, question);
                current = question;
                question = current/2;
            };
        };
    };
    
    int return_max(){
        int last = heap.size()-1;
        int first = 1;
        swap1(first,last);
        int answer = heap[last];
        heap.pop_back();
        int current = 1;
        int var1 = current *2;
        int var2 = current *2 +1;
        while(heap[current] < max(heap[var1], heap[var2]) && var2< heap.size()){
            if(heap[var1] > heap[var2]){
                swap1(var1, current);
                current = var1;
                var1 = current*2;
                var2 = current*2+1;
            }
            else{
                swap1(var2,current);
                current = var2;
                var1 = current*2;
                var2 = current*2+1;
            };
        };
        if (var1 < heap.size() && heap[var1]< heap[current]){
            swap1(var1, current);
        };
        return answer;
    };
    
    void show(){
        for ( int x = 0; x < heap.size(); x++){
            cout << heap[x] << endl;
        };
    };
};
